{"version":3,"sources":["components/Button.js","components/Display.js","App.js","reportWebVitals.js","index.js"],"names":["Button","value","onClick","className","style","fontSize","Display","query","result","App","useState","setResult","setQuery","queryArray","setQueryArray","useEffect","displayResult","displayQuery","length","includes","tlrHelper","operator","Math","sin","cos","tan","log10","log","sqrt","helper","first","second","pow","basicOperationHelper","array","operatorCount","firstOperand","secondOperand","operator_","operators","operatorContain","i","push","Number","join","shift","mainHelper","input","opera","valueArray","closingBracket","k","bracketNotation","indexOf","slice","isNaN","spliceNumber","replaceValue","splice","m","powerHelper","idx","base","exponent","leftOperatorIdx","rightOperatorIdx","j","legnth","bracketValue","startIdx","leftIdx","rightIdx","pop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":";0PAceA,EAZA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAC9B,OACI,wBAAQA,UAAWA,EAAWD,QAChB,MAAVD,EAAe,kBAAMC,KAAY,kBAAMA,EAAQD,IADnD,SAGe,QAAVA,EAAiB,qCAAGA,EAAM,sBAAMG,MAAO,CAACC,SAAS,GAAvB,mBAEzBJ,KCOCK,G,MAdC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACrB,OACG,sBAAKL,UAAU,cAAf,UACI,yBAASA,UAAU,SAAnB,SACKK,IAEL,0BAASL,UAAU,QAAnB,UACI,mBAAGA,UAAU,aAAb,eACA,mBAAGA,UAAU,aAAb,SAA2BI,Y,MC6f5BE,MAlgBf,WAAgB,IAAD,EACeC,mBAAS,GADxB,mBACNF,EADM,KACEG,EADF,OAEaD,mBAAS,IAFtB,mBAENH,EAFM,KAECK,EAFD,OAGuBF,mBAAS,IAHhC,mBAGNG,EAHM,KAGMC,EAHN,KAKbC,qBAAU,WACRC,OAIF,IAmBMC,EAAe,SAAChB,GACpB,GAAa,MAAVA,GAAkC,IAAjBM,EAAMW,OAA1B,CAOA,GAJa,QAAVjB,IACDA,EAAQ,KAGwB,eAA/BY,EAAWN,EAAMW,OAAO,KACxB,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKC,SAASlB,GAGlC,OAFAa,EAAc,GAAD,mBAAKD,GAAL,CAAiB,IAAKZ,UACnCW,EAAS,GAAD,mBAAKL,GAAL,CAAY,IAAKN,KAK7B,GAAG,CAAC,MAAO,MAAO,MAAO,MAAO,KAAM,KAAKkB,SAASlB,GAGlD,OAFAW,EAAS,GAAD,mBAAKL,GAAL,CAAYN,EAAO,YAC3Ba,EAAc,GAAD,mBAAKD,GAAL,CAAiBZ,EAAO,OAKvC,GAAa,MAAVA,EAAc,CACf,GAAoB,IAAjBM,EAAMW,QAA0C,MAA1BX,EAAMA,EAAMW,OAAO,GAG1C,OAFAN,EAAS,GAAD,mBAAKL,GAAL,CAAYN,UACpBa,EAAc,GAAD,mBAAKD,GAAL,CAAiBZ,KAE1B,IAAI,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKkB,SAASZ,EAAMA,EAAMW,OAAO,IAG9D,OAFAN,EAAS,GAAD,mBAAKL,GAAL,CAAY,IAAKN,UACzBa,EAAc,GAAD,mBAAKD,GAAL,CAAiB,IAAKZ,KAIvCW,EAAS,GAAD,mBAAKL,GAAL,CAAYN,KACpBa,EAAc,GAAD,mBAAKD,GAAL,CAAiBZ,OAI1BmB,EAAY,SAACC,EAAUpB,GAC3B,IAAIO,EAAS,EAEb,OAAOa,GACL,IAAK,MACHb,EAASc,KAAKC,IAAItB,GAClB,MACF,IAAK,MACHO,EAASc,KAAKE,IAAIvB,GAClB,MACF,IAAK,MACHO,EAASc,KAAKG,IAAIxB,GAClB,MACF,IAAK,MACHO,EAASc,KAAKI,MAAMzB,GACpB,MACF,IAAK,KACHO,EAASc,KAAKK,IAAI1B,GAClB,MACF,IAAK,OACHO,EAASc,KAAKM,KAAK3B,GAKvB,OAAOO,GAIHqB,EAAS,SAACC,EAAOC,EAAQV,GAC7B,IAAIb,EAAS,EACb,OAAOa,GACL,IAAK,IACHb,EAASsB,EAAQC,EACjB,MACF,IAAK,IACHvB,EAASsB,EAAQC,EACjB,MACF,IAAK,IACHvB,EAASsB,EAAQC,EACjB,MACF,IAAK,IACHvB,EAASsB,EAAQC,EACjB,MACF,IAAK,IACHvB,EAASsB,EAAQC,EACjB,MACF,IAAK,IACHvB,EAASc,KAAKU,IAAIF,EAAOC,GAK7B,OAAOvB,GAIHyB,EAAuB,SAACC,GAW5B,IAVA,IAAI1B,EAAS,EACTsB,EAAQ,GACRK,EAAgB,EAChBJ,EAAS,GACTK,EAAe,EACfC,EAAgB,EACdC,EAAY,GACZC,EAAY,CAAC,IAAK,IAAK,IAAK,IAAK,KACnCC,GAAkB,EAEdC,EAAE,EAAGA,EAAEP,EAAMhB,OAAQuB,IAC7B,GAAGF,EAAUpB,SAASe,EAAMO,IAAI,CAC9B,GAAGF,EAAUpB,SAASe,EAAMO,EAAE,IAE5B,OADA9B,EAAU,IACH,OAET2B,EAAUI,KAAKR,EAAMO,IAGrBD,GAAkB,EAEG,MAJrBL,IAKEC,EAAeO,OAAOb,EAAMc,KAAK,KACjCP,EAAgBM,OAAOZ,EAAOa,KAAK,KAEnCpC,EAASqB,EAAOO,EAAcC,EAAeC,EAAU,IACvDA,EAAUO,QACVT,EAAe5B,EACfuB,EAAS,GACTM,EAAgB,GAEfF,EAAgB,IACjBE,EAAgBM,OAAOZ,EAAOa,KAAK,KAEnCpC,EAASqB,EAAOO,EAAcC,EAAeC,EAAU,IACvDA,EAAUO,QACVT,EAAe5B,EACfuB,EAAS,GACTM,EAAgB,QAGbF,GAAiB,EACG,IAAlBA,EACDL,EAAMY,KAAKR,EAAMO,IACQ,IAAlBN,GACPJ,EAAOW,KAAKR,EAAMO,IAEbN,EAAgB,GACvBJ,EAAOW,KAAKR,EAAMO,IAMxB,OAAID,GAKCL,EAAgB,IACjBE,EAAgBM,OAAOZ,EAAOa,KAAK,KACnCpC,EAASqB,EAAOO,EAAcC,EAAeC,EAAU,KAEpC,IAAlBH,IACDC,EAAeO,OAAOb,EAAMc,KAAK,KACjCP,EAAgBM,OAAOZ,EAAOa,KAAK,KACnCpC,EAASqB,EAAOO,EAAcC,EAAeC,EAAU,KAElD9B,GAbPA,EAASmC,OAAOT,EAAMU,KAAK,MAmBvBE,EAAa,SAACC,GAClB,IAAK,IAAIN,EAAE,EAAGA,EAAEM,EAAM7B,OAAQuB,IAG5B,GAAG,CAAC,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAMtB,SAAS4B,EAAMN,IAAI,CAQ/D,IAPA,IAAMO,EAAQD,EAAMN,GAChBQ,EAAa,GACbC,GAAiB,EACjBjD,OAAK,EAIDkD,EAAEV,EAAE,EAAGU,EAAEJ,EAAM7B,OAAQiC,IAAI,CAKjC,GAJgB,MAAbJ,EAAMI,IACPC,EAAgBL,EAAOI,GAGT,MAAbJ,EAAMI,IAAcA,IAAMJ,EAAM7B,OAAO,GAA8B,IAAzB6B,EAAMM,QAAQL,GAI3D,OAFAC,EAAaF,EAAMO,MAAMb,EAAE,EAAGU,GAC9BlD,EAAQgC,EAAqBgB,GAC1BM,MAAMnC,EAAU4B,EAAO/C,KACxBU,EAAU,IACH,SAETA,EAAUS,EAAU4B,EAAO/C,IACpB,QAEH,GAAgB,MAAb8C,EAAMI,IAAcA,IAAMJ,EAAM7B,OAAO,GAA8B,IAAzB6B,EAAMM,QAAQL,GAAa,CAG9E,IAAIQ,EAAeT,EAAMO,MAAMP,EAAMM,QAAQL,GAAQG,EAAE,GAAGjC,OAC1D+B,EAAaF,EAAMO,MAAMb,EAAE,EAAGU,GAC9BlD,EAAQgC,EAAqBgB,GAC7B,IAAIQ,EAAerC,EAAU4B,EAAO/C,GACpC8C,EAAMW,OAAOX,EAAMM,QAAQL,GAAQQ,EAAcC,GACjDP,GAAiB,EACjB,MAEI,GAA4B,IAAzBH,EAAMM,QAAQL,GAAa,CAElC,IAAI,IAAIW,EAAElB,EAAE,EAAGkB,EAAEZ,EAAM7B,OAAQyC,IAAI,CAEjC,GAAgB,MAAbZ,EAAMY,IAAcA,IAAMZ,EAAM7B,OAAO,EAAE,CAE1C,IAAIsC,EAAeT,EAAMO,MAAMP,EAAMM,QAAQL,GAAQD,EAAM7B,QAAQA,OACnE+B,EAAaF,EAAMO,MAAMb,EAAE,EAAGkB,GAC9B1D,EAAQgC,EAAqBgB,GAC7B,IAAIQ,EAAerC,EAAU4B,EAAO/C,GACpC8C,EAAMW,OAAOX,EAAMM,QAAQL,GAAQQ,EAAcC,GACjDP,GAAiB,EACjB,MAEI,GAAgB,MAAbH,EAAMY,IAAcZ,EAAMM,QAAQL,KAAWD,EAAM7B,OAAO,EAAE,CACnE,IAAIsC,EAAeT,EAAMO,MAAMP,EAAMM,QAAQL,GAAQW,EAAE,GAAGzC,OAC1D+B,EAAaF,EAAMO,MAAMb,EAAE,EAAGkB,GAC9B1D,EAAQgC,EAAqBgB,GAC7B,IAAIQ,EAAerC,EAAU4B,EAAO/C,GACpC8C,EAAMW,OAAOX,EAAMM,QAAQL,GAAQQ,EAAcC,GACjDP,GAAiB,EACjB,OAKJ,IAAIA,GAA2C,IAAzBH,EAAMM,QAAQL,GAAa,CAE/C,IAAIQ,EAAeT,EAAMO,MAAMP,EAAMM,QAAQL,GAAQD,EAAM7B,QAAQA,OACnE+B,EAAaF,EAAMO,MAAMb,EAAE,EAAGM,EAAM7B,QACpCjB,EAAQgC,EAAqBgB,GAC7B,IAAIQ,EAAerC,EAAU4B,EAAO/C,GACpC8C,EAAMW,OAAOX,EAAMM,QAAQL,GAAQQ,EAAcC,GACjD,MAEF,OAKJ,IAAIP,GAA2C,IAAzBH,EAAMM,QAAQL,GAGlC,OAFAC,EAAaF,EAAMO,MAAMb,EAAE,GAC3BxC,EAAQgC,EAAqBgB,GAC1BM,MAAMnC,EAAU4B,EAAO/C,KACxBU,EAAU,IACH,SAETA,EAAUS,EAAU4B,EAAO/C,IACpB,UAOT2D,EAAc,SAACb,EAAOc,GAS1B,IARA,IAEIC,EACAC,EAGAvD,EANAsB,EAAQ,GACRC,EAAS,GAGTiC,EAAkB,EAClBC,EAAmBlB,EAAM7B,OAAO,EAG5BuB,EAAEoB,EAAI,EAAGpB,GAAG,EAAGA,IAAI,CACzB,GAAgB,MAAbM,EAAMN,GAEP,IADA,IAAIQ,EAAa,GACTE,EAAEV,EAAE,EAAGU,GAAG,EAAGA,IAAI,CACvB,GAAgB,MAAbJ,EAAMI,GAAW,CAClB,IAAIK,EAAeT,EAAMO,MAAMH,EAAGV,EAAE,GAAGvB,OACnCuC,EAAexB,EAAqBgB,GACxCF,EAAMW,OAAOP,EAAGK,EAAcC,GAC9BhB,EAAIU,EACJU,EAAMV,EAAE,EACR,MAEAF,EAAWP,KAAKK,EAAMI,IAI5B,GAAG,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKhC,SAAS4B,EAAMN,IAAI,CAC9CuB,EAAkBvB,EAClB,MAEAX,EAAMY,KAAKK,EAAMN,IAIrB,IAAI,IAAIyB,EAAEL,EAAI,EAAGK,EAAEnB,EAAM7B,OAAQgD,IAAI,CACnC,GAAgB,MAAbnB,EAAMmB,GAAW,CAClBD,EAAmBC,EACnB,MAEAnC,EAAOW,KAAKK,EAAMmB,IAMtB,GAHAJ,EAAOnB,OAAOb,EAAMc,KAAK,KACzBmB,EAAW9B,EAAqBF,GAChCvB,EAASqB,EAAOiC,EAAMC,EAAU,KACT,IAApBC,GAAyBC,IAAqBlB,EAAM7B,OAAO,EAE5D,OADAP,EAAUH,GACH,OACH,GAAuB,IAApBwD,GAAyBC,IAAqBlB,EAAM7B,OAAO,EAAE,CACpE,IAAIsC,EAAeT,EAAMO,MAAMU,EAAiBC,EAAiB,GAAG/C,OACpE6B,EAAMW,OAAOM,EAAiBR,EAAchD,QACxC,GAAuB,IAApBwD,GAAyBC,IAAqBlB,EAAMoB,OAAO,EAAE,CACpE,IAAIX,EAAeT,EAAMO,MAAMU,EAAgB,EAAGC,EAAiB,GAAG/C,OACtE6B,EAAMW,OAAOM,EAAgB,EAAGR,EAAchD,KAO5C4C,EAAkB,SAAlBA,EAAmBL,GAMvB,IAN8C,IAG1CqB,EAH0BC,EAAe,uDAAN,EAEnCpB,EAAa,GAEbqB,EAAU,EACVC,EAAWxB,EAAM7B,OAAO,EACpBuB,EAAE4B,EAAU5B,EAAEM,EAAM7B,OAAQuB,IAClC,GAAgB,MAAbM,EAAMN,GAAW,CAClB6B,EAAU7B,EACV,IAAI,IAAIyB,EAAEzB,EAAE,EAAGyB,EAAEnB,EAAM7B,OAAQgD,IAAI,CAKjC,GAJgB,MAAbnB,EAAMmB,IAEPd,EAAgBL,EAAOmB,GAET,MAAbnB,EAAMmB,GAAW,CAClBK,EAAWL,EACX,MAIF,GAFEjB,EAAWP,KAAKK,EAAMmB,IAErBA,IAAMnB,EAAM7B,OAAO,EAAE,CACtBqD,EAAWL,EACX,OAGJ,GAAyB,IAAtBjB,EAAW/B,OAEZ,OADAP,EAAU,IACH,OAETyD,EAAenC,EAAqBgB,GACpCA,EAAa,GACb,IAAIO,EAAeT,EAAMO,MAAMgB,EAASC,EAAS,GAAGrD,OACpD6B,EAAMW,OAAOY,EAASd,EAAcY,KAQtCpD,EAAgB,WACpB,IAAM+B,EAAQlC,EAAWyC,QAGzB,GAA6B,eAA1BP,EAAMA,EAAM7B,OAAO,IAAwC,IAAjB6B,EAAM7B,OAMnD,GAAG,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKC,SAASN,EAAWA,EAAWK,OAAO,IACjEP,EAAU,SAKZ,GAAoB,IAAjBoC,EAAM7B,QAAiC,IAAjB6B,EAAM7B,OAA/B,CAOA,IAAK,IAAIuB,EAAE,EAAGA,EAAEM,EAAM7B,OAAQuB,IAAI,CAChC,GAAgB,MAAbM,EAAMN,IAAoB,IAANA,EAErB,YADA9B,EAAU,GAEN,GAAgB,MAAboC,EAAMN,IAEC,SADDmB,EAAYb,EAAON,GAE9B,OAMF,GAAG,CAAC,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAMtB,SAAS4B,EAAMN,IAE3D,GAAc,SADDK,EAAWC,GAEtB,OAOLA,EAAM5B,SAAS,MACc,SAA3BiC,EAAgBL,KAKlBQ,MAAMtB,EAAqBc,IAC5BpC,EAAU,IAEZA,EAAUsB,EAAqBc,UAtC7BpC,EAAU,SAZVA,EAAU,eAwEd,OACE,sBAAKR,UAAU,YAAf,UACE,cAAC,EAAD,CAASI,MAAOA,EAAOM,WAAYA,EAAYL,OAAQA,IACvD,sBAAKL,UAAU,OAAf,UACE,cAAC,EAAD,CAAQF,MAAO,IAAKC,QArBZ,WAAOU,EAAS,IAAKD,EAAU,GAAIG,EAAc,KAqBrBX,UAAU,UAC9C,cAAC,EAAD,CAAQF,MAAO,MAAOC,QAASe,EAAcd,UAAU,UACvD,cAAC,EAAD,CAAQF,MAAO,IAAKC,QAASe,EAAcd,UAAU,UACrD,cAAC,EAAD,CAAQF,MAAO,IAAKC,QAASe,EAAcd,UAAU,cACrD,cAAC,EAAD,CAAQF,MAAO,MAAOC,QAASe,EAAcd,UAAU,QACvD,cAAC,EAAD,CAAQF,MAAO,MAAOC,QAASe,EAAcd,UAAU,QAEvD,cAAC,EAAD,CAAQF,MAAO,EAAGC,QAASe,EAAcd,UAAU,WACnD,cAAC,EAAD,CAAQF,MAAO,EAAGC,QAASe,EAAcd,UAAU,WACnD,cAAC,EAAD,CAAQF,MAAO,EAAGC,QAASe,EAAcd,UAAU,WACnD,cAAC,EAAD,CAAQF,MAAO,IAAKC,QAASe,EAAcd,UAAU,cACrD,cAAC,EAAD,CAAQF,MAAO,MAAOC,QAASe,EAAcd,UAAU,QACvD,cAAC,EAAD,CAAQF,MAAO,MAAOC,QAASe,EAAcd,UAAU,QAEvD,cAAC,EAAD,CAAQF,MAAO,EAAGC,QAASe,EAAcd,UAAU,WACnD,cAAC,EAAD,CAAQF,MAAO,EAAGC,QAASe,EAAcd,UAAU,WACnD,cAAC,EAAD,CAAQF,MAAO,EAAGC,QAASe,EAAcd,UAAU,WACnD,cAAC,EAAD,CAAQF,MAAO,IAAKC,QAASe,EAAcd,UAAU,cACrD,cAAC,EAAD,CAAQF,MAAO,8CAAWC,QAlerB,SAACD,GAEe,IAAtBY,EAAWK,QAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKC,SAASN,EAAWA,EAAWK,OAAO,KAI7FJ,EAAc,GAAD,mBAAKD,GAAL,CAAiB,gBAC9BD,EAAS,GAAD,mBAAKL,GAAL,CAAYN,OAJpBa,EAAc,GAAD,mBAAKD,GAAL,CAAiB,IAAK,gBACnCD,EAAS,GAAD,mBAAKL,GAAL,CAAY,IAAKN,OA8dgBE,UAAU,QACjD,cAAC,EAAD,CAAQF,MAAO,IAAKC,QAASe,EAAcd,UAAU,QAErD,cAAC,EAAD,CAAQF,MAAO,EAAGC,QAASe,EAAcd,UAAU,WACnD,cAAC,EAAD,CAAQF,MAAO,EAAGC,QAASe,EAAcd,UAAU,WACnD,cAAC,EAAD,CAAQF,MAAO,EAAGC,QAASe,EAAcd,UAAU,WACnD,cAAC,EAAD,CAAQF,MAAO,IAAKC,QAASe,EAAcd,UAAU,cACrD,cAAC,EAAD,CAAQF,MAAO,8CAAcC,QA7dtB,SAACD,GACZa,EAAc,GAAD,mBAAKD,GAAL,CAAiB,OAAQ,OACtCD,EAAS,GAAD,mBAAKL,GAAL,CAAYN,EAAO,QA2dqBE,UAAU,QACtD,cAAC,EAAD,CAAQF,MAAO,KAAMC,QAASe,EAAcd,UAAU,QAEtD,cAAC,EAAD,CAAQF,MAAO,EAAGC,QAASe,EAAcd,UAAU,WACnD,cAAC,EAAD,CAAQF,MAAO,IAAKC,QAASe,EAAcd,UAAU,WACrD,cAAC,EAAD,CAAQF,MAAO,IAAMC,QAhDf,WACVW,EAAW2D,MACR,CAAC,MAAO,MAAO,MAAO,MAAO,OAAQ,KAAM,KAAKrD,SAASN,EAAWA,EAAWK,OAAO,KACvFL,EAAW2D,MACXjE,EAAMiE,MACNjE,EAAMiE,OAENjE,EAAMiE,MAGR5D,EAAS,YAAIL,IACbO,EAAc,YAAID,KAqCqBV,UAAU,WAC7C,cAAC,EAAD,CAAQF,MAAO,IAAMC,QAASc,EAAeb,UAAU,UACvD,cAAC,EAAD,CAAQF,MAAO,IAAKC,QAASe,EAAcd,UAAU,aACrD,cAAC,EAAD,CAAQF,MAAO,IAAKC,QAASe,EAAcd,UAAU,oBCpf9CsE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0afe8493.chunk.js","sourcesContent":["import '../componentStyles/Button.css';\r\n\r\nconst Button = ( {value, onClick, className} ) => {\r\n    return (\r\n        <button className={className} onClick={\r\n            value === '='? () => onClick() : () => onClick(value)\r\n            }> \r\n            {value === 'log'? <>{value}<span style={{fontSize:6,\r\n            }}>10</span></> \r\n            : value\r\n            }         \r\n        </button>\r\n    )\r\n}\r\nexport default Button;\r\n","import '../componentStyles/Display.css';\r\n\r\nconst Display = ({ query, result }) => {  \r\n     return (\r\n        <div className=\"result-area\">\r\n            <section className=\"result\">\r\n                {result}\r\n            </section>\r\n            <section className=\"query\">\r\n                <p className=\"equal-sign\">=</p>\r\n                <p className=\"query-side\">{query}</p>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;\r\n","import { useState, useEffect } from 'react';\nimport Button from './components/Button';\nimport Display from './components/Display';\nimport './componentStyles/App.css';\n\nfunction App() {\n  const [result, setResult] = useState(0);\n  const [query, setQuery] = useState([]);\n  const [queryArray, setQueryArray] = useState([]);\n  \n  useEffect(() =>{\n    displayResult();\n  });\n\n  //! display special PI\n  const pi = (value) => {\n\n    if(queryArray.length !== 0 && !['/', 'x', '-', '+', '%'].includes(queryArray[queryArray.length-1])){\n      setQueryArray([...queryArray, 'x', 3.1415926536]);\n      setQuery([...query, 'x', value]);\n    }else{\n      setQueryArray([...queryArray, 3.1415926536]);\n      setQuery([...query, value]);\n    }\n  }\n\n  //! squareroot thing\n  const sqrt = (value) => {\n    setQueryArray([...queryArray, 'sqrt', '(']);\n    setQuery([...query, value, '(']);    \n  }\n\n  //! display user inputs\n  // the changed state isn't accessible in the changing function\n  const displayQuery = (value) => {\n    if(value === '-' && query.length === 0){\n      return;\n    }\n    if(value === '+/-'){\n      value = '-';\n    } \n    \n    if(queryArray[query.length-1] === 3.1415926536 && \n      !['/', 'x', '-', '+', '%'].includes(value)){\n        setQueryArray([...queryArray, 'x', value]);\n        setQuery([...query, 'x', value]);\n        return;\n    }\n\n    \n    if(['sin', 'cos', 'tan', 'log', 'ln', '^'].includes(value)){\n      setQuery([...query, value, '(']);\n      setQueryArray([...queryArray, value, '(']);\n      return;\n    }\n    \n    // automatically add '*' sign before '(' if there is no operator\n    if(value === '('){\n      if(query.length === 0 || query[query.length-1] === '('){\n        setQuery([...query, value]);\n        setQueryArray([...queryArray, value]);\n        return;\n      }else if(!['/', 'x', '-', '+', '%'].includes(query[query.length-1])){\n        setQuery([...query, '*', value]);\n        setQueryArray([...queryArray, '*', value]);\n        return;\n      }\n    }   \n    setQuery([...query, value,]);\n    setQueryArray([...queryArray, value]);\n  }\n\n  //! trigonometry, root, and logarithm helper\n  const tlrHelper = (operator, value) => {\n    let result = 0;\n\n    switch(operator){\n      case 'sin':\n        result = Math.sin(value);\n        break;\n      case 'cos':\n        result = Math.cos(value);\n        break;\n      case 'tan':\n        result = Math.tan(value);\n        break;\n      case 'log':\n        result = Math.log10(value);\n        break;\n      case 'ln':\n        result = Math.log(value);\n        break;\n      case 'sqrt':\n        result = Math.sqrt(value);\n        break;\n      default:\n        break;\n    }\n    return result;\n  }\n\n  //! normal operation helper\n  const helper = (first, second, operator) => {\n    let result = 0;\n    switch(operator){\n      case 'x':\n        result = first * second;\n        break;\n      case '/':\n        result = first / second;\n        break;\n      case '+':\n        result = first + second;\n        break; \n      case '-':\n        result = first - second;\n        break;\n      case '%':\n        result = first % second;\n        break;\n      case '^':\n        result = Math.pow(first, second);\n        break;\n      default:            \n        break;  \n    }\n    return result;\n  }\n\n  //! helper function for basic operations\n  const basicOperationHelper = (array) => {\n    let result = 0;\n    let first = [];\n    let operatorCount = 0;\n    let second = [];\n    let firstOperand = 0;\n    let secondOperand = 0;\n    const operator_ = [];\n    const operators = ['x', '-', '+', '/', '%'];  \n    let operatorContain = false;\n    \n    for(let i=0; i<array.length; i++){\n    if(operators.includes(array[i])){\n      if(operators.includes(array[i+1])){\n        setResult('');\n        return 'Done';\n      }               \n      operator_.push(array[i]);\n      operatorCount++;\n\n      operatorContain = true;\n      \n      if(operatorCount === 2){\n        firstOperand = Number(first.join(''));\n        secondOperand = Number(second.join(''));\n    \n        result = helper(firstOperand, secondOperand, operator_[0]);\n        operator_.shift();\n        firstOperand = result;\n        second = [];            //? reset second[] and secondOperand\n        secondOperand = 0;\n      }\n      if(operatorCount > 2){\n        secondOperand = Number(second.join(''));\n\n        result = helper(firstOperand, secondOperand, operator_[0]);\n        operator_.shift();\n        firstOperand = result;\n        second = [];    //? reset second[] and secondOperand\n        secondOperand = 0;\n      }\n    }else{\n        if(operatorCount <= 1){\n          if(operatorCount === 0){ \n            first.push(array[i]);\n          }else if(operatorCount === 1){\n            second.push(array[i]);\n          }\n        }else if(operatorCount > 1){\n          second.push(array[i]);\n        }\n      }\n    }\n\n    // if there is no operator\n    if(!operatorContain){\n      result = Number(array.join(''));\n      return result;\n    }\n\n      if(operatorCount > 1){\n        secondOperand = Number(second.join(''));     \n        result = helper(firstOperand, secondOperand, operator_[0]);      \n      }\n      if(operatorCount === 1){\n        firstOperand = Number(first.join(''));\n        secondOperand = Number(second.join(''));\n        result = helper(firstOperand, secondOperand, operator_[0]);\n      } \n      return result;   \n    } \n    //! end of basic ooperationHelper\n\n\n    //! main helper\n    const mainHelper = (input) => {\n      for (let i=0; i<input.length; i++){\n      \n      // trigonometry, logarithm, and squareroot block\n        if(['sin', 'cos', 'tan', 'log', 'sqrt', 'ln'].includes(input[i])){\n          const opera = input[i];\n          let valueArray = [];\n          let closingBracket = false;\n          let value;\n\n               \n          // look for closing bracket or nested brackets\n          for(let k=i+2; k<input.length; k++){\n            if(input[k] === '('){\n              bracketNotation(input, k);\n            }\n            \n            if(input[k] === ')' && k === input.length-1 && input.indexOf(opera) === 0){\n              \n              valueArray = input.slice(i+2, k);\n              value = basicOperationHelper(valueArray);\n              if(isNaN(tlrHelper(opera, value))){\n                setResult('');\n                return 'Done';\n              }\n              setResult(tlrHelper(opera, value));\n              return 'Done';\n\n            }else if(input[k] === ')' && k !== input.length-1 && input.indexOf(opera) === 0){\n\n\n              let spliceNumber = input.slice(input.indexOf(opera), k+1).length;\n              valueArray = input.slice(i+2, k);\n              value = basicOperationHelper(valueArray);            \n              let replaceValue = tlrHelper(opera, value);\n              input.splice(input.indexOf(opera), spliceNumber, replaceValue);  \n              closingBracket = true;\n              break;\n\n            }else if(input.indexOf(opera) !== 0){\n\n              for(let m=i+2; m<input.length; m++){\n\n                if(input[m] === ')' && m === input.length-1){\n\n                  let spliceNumber = input.slice(input.indexOf(opera), input.length).length;\n                  valueArray = input.slice(i+2, m);\n                  value = basicOperationHelper(valueArray);\n                  let replaceValue = tlrHelper(opera, value);\n                  input.splice(input.indexOf(opera), spliceNumber, replaceValue);\n                  closingBracket = true;\n                  break;\n\n                }else if(input[m] === ')' && input.indexOf(opera) !== input.length-1){\n                  let spliceNumber = input.slice(input.indexOf(opera), m+1).length;\n                  valueArray = input.slice(i+2, m);\n                  value = basicOperationHelper(valueArray);\n                  let replaceValue = tlrHelper(opera, value);\n                  input.splice(input.indexOf(opera), spliceNumber, replaceValue);\n                  closingBracket = true;\n                  break;\n                }\n                \n              } //! end of innermost for loop\n              // if there is no closing bracket, when opera is not the first item\n              if(!closingBracket && input.indexOf(opera) !== 0){\n            \n                let spliceNumber = input.slice(input.indexOf(opera), input.length).length;\n                valueArray = input.slice(i+2, input.length);\n                value = basicOperationHelper(valueArray);\n                let replaceValue = tlrHelper(opera, value);\n                input.splice(input.indexOf(opera), spliceNumber, replaceValue);\n                break;\n              }\n              break;\n            }//! end of else if block\n          } //! end of inner for loop\n\n          // if there is no closing bracket\n          if(!closingBracket && input.indexOf(opera) === 0){\n            valueArray = input.slice(i+2);\n            value = basicOperationHelper(valueArray);\n            if(isNaN(tlrHelper(opera, value))){\n              setResult('');\n              return 'Done';\n            }\n            setResult(tlrHelper(opera, value));\n            return 'Done';\n          }\n        }//! end of top-level if block\n      }//! end of top-level for loop\n    }//! end of main helper\n\n    //! calculate a number raised to a exponent\n    const powerHelper = (input, idx) => {\n      let first = [];\n      let second = [];\n      let base = 0;\n      let exponent = 0;\n      let leftOperatorIdx = 0;\n      let rightOperatorIdx = input.length-1;\n      let result = 0;\n      \n      for(let i=idx-1; i>=0; i--){\n        if(input[i] === ')'){\n          let valueArray = [];\n          for(let k=i-1; k>=0; k--){\n            if(input[k] === '('){\n              let spliceNumber = input.slice(k, i+1).length;\n              let replaceValue = basicOperationHelper(valueArray);\n              input.splice(k, spliceNumber, replaceValue);\n              i = k;\n              idx = k+1;\n              break;\n            }else{\n              valueArray.push(input[k]);\n            }\n          }\n        }\n        if(['x', '-', '+', '/', '%'].includes(input[i])){\n          leftOperatorIdx = i;\n          break;\n        }else{\n          first.push(input[i]);\n        }\n        \n      }\n      for(let j=idx+2; j<input.length; j++){\n        if(input[j] === ')'){\n          rightOperatorIdx = j;\n          break;\n        }else{\n          second.push(input[j]);\n        }\n      }\n      base = Number(first.join(''));\n      exponent = basicOperationHelper(second);\n      result = helper(base, exponent, '^');\n      if(leftOperatorIdx === 0 && rightOperatorIdx === input.length-1){\n        setResult(result);\n        return 'Done';\n      }else if(leftOperatorIdx === 0 && rightOperatorIdx !== input.length-1){\n        let spliceNumber = input.slice(leftOperatorIdx, rightOperatorIdx+1).length;\n        input.splice(leftOperatorIdx, spliceNumber, result);\n      }else if(leftOperatorIdx !== 0 && rightOperatorIdx !== input.legnth-1){\n        let spliceNumber = input.slice(leftOperatorIdx+1, rightOperatorIdx+1).length;\n        input.splice(leftOperatorIdx+1, spliceNumber, result);\n      }\n    }\n    //! end of power helper function\n\n    //! bracket notation helper\n  \n    const bracketNotation = (input, startIdx=0) => {\n\n      let valueArray = [];\n      let bracketValue;\n      let leftIdx = 0;\n      let rightIdx = input.length-1;\n      for(let i=startIdx; i<input.length; i++){\n        if(input[i] === '('){\n          leftIdx = i;\n          for(let j=i+1; j<input.length; j++){\n            if(input[j] === '('){   \n              // handles nested bracket notations \n              bracketNotation(input, j);\n            }\n            if(input[j] === ')'){\n              rightIdx = j;            \n              break;\n            }else{          \n              valueArray.push(input[j]);\n            }\n            if(j === input.length-1){\n              rightIdx = j;\n              break;\n            }\n          }\n          if(valueArray.length === 0){\n            setResult('');\n            return 'Done';\n          }\n          bracketValue = basicOperationHelper(valueArray); \n          valueArray = [];   \n          let spliceNumber = input.slice(leftIdx, rightIdx+1).length;\n          input.splice(leftIdx, spliceNumber, bracketValue);\n        }\n      }// end of outer for loop\n    }\n    //! end of bracket notation helper\n\n  \n  //! calculate the result and display with setResult\n  const displayResult = () => {\n    const input = queryArray.slice(); //? queryArray is unaffected by operations\n\n    //? display the value of PI\n    if(input[input.length-1] === 3.1415926536 && input.length === 1){\n      setResult(3.1415926536);\n      return;\n    }\n\n    // if there is operators as the last value in the querryArray\n    if(['/', 'x', '-', '+', '%'].includes(queryArray[queryArray.length-1])){\n      setResult('');\n      return;\n    }\n\n    // if there is just a single value with no opearators\n    if(input.length === 1 || input.length === 2){\n      setResult('');\n      return;\n    }\n\n    // if first value is a -ve sign in query[], \n    // it is same as having first operand as 0!\n    for (let i=0; i<input.length; i++){\n      if(input[i] === '^' && i === 0){\n        setResult(0);\n        return;\n      }else if(input[i] === '^'){\n        let status = powerHelper(input, i);\n        if(status === 'Done'){\n          return;\n        }\n      }\n\n           \n      //? trigonometry, logarithm, and squreroot block\n        if(['sin', 'cos', 'tan', 'log', 'sqrt', 'ln'].includes(input[i])){\n          let status = mainHelper(input);\n          if(status === 'Done'){\n            return;\n          }\n        }  \n\n    }  //! end of top level for loop\n\n    //? if there is any brackets\n    if(input.includes('(')){\n      if(bracketNotation(input) === 'Done'){\n        return;\n      }\n    }\n    // exception handler\n    if(isNaN(basicOperationHelper(input))){\n      setResult('');\n    }else{\n    setResult(basicOperationHelper(input));  \n    }\n  } //! end of displayResult  \n\n  // clear the query area\n  const clear = () => {setQuery([]); setResult(0); setQueryArray([])}\n\n  // remove last part of user input\n  const cut = () => {\n    queryArray.pop();\n    if(['sin', 'cos', 'tan', 'log', 'sqrt', 'ln', '^'].includes(queryArray[queryArray.length-1])){\n      queryArray.pop();\n      query.pop();\n      query.pop();\n    }else{\n      query.pop();\n    }\n   \n    setQuery([...query]);\n    setQueryArray([...queryArray]);\n  }\n\n  return (\n    <div className=\"container\">\n      <Display query={query} queryArray={queryArray} result={result}/>\n      <div className=\"keys\">\n        <Button value={'C'} onClick={clear} className='clear' />\n        <Button value={'+/-'} onClick={displayQuery} className='clear' />\n        <Button value={'%'} onClick={displayQuery} className='clear' />\n        <Button value={'/'} onClick={displayQuery} className='operators' />\n        <Button value={'sin'} onClick={displayQuery} className='tlr' />\n        <Button value={'cos'} onClick={displayQuery} className='tlr' />\n\n        <Button value={7} onClick={displayQuery} className='number' />\n        <Button value={8} onClick={displayQuery} className='number' />\n        <Button value={9} onClick={displayQuery} className='number' />\n        <Button value={'x'} onClick={displayQuery} className='operators' />\n        <Button value={'tan'} onClick={displayQuery} className='tlr' />\n        <Button value={'log'} onClick={displayQuery} className='tlr' />\n\n        <Button value={4} onClick={displayQuery} className='number' />\n        <Button value={5} onClick={displayQuery} className='number' />\n        <Button value={6} onClick={displayQuery} className='number' />\n        <Button value={'-'} onClick={displayQuery} className='operators' />\n        <Button value={<>&pi;</>} onClick={pi} className='tlr' />\n        <Button value={'^'} onClick={displayQuery} className='tlr' />\n\n        <Button value={1} onClick={displayQuery} className='number' />\n        <Button value={2} onClick={displayQuery} className='number' />\n        <Button value={3} onClick={displayQuery} className='number' />\n        <Button value={'+'} onClick={displayQuery} className='operators' />\n        <Button value={<>&#8730;</>} onClick={sqrt} className='tlr' />\n        <Button value={'ln'} onClick={displayQuery} className='tlr' />\n\n        <Button value={0} onClick={displayQuery} className='number' />\n        <Button value={'.'} onClick={displayQuery} className='number' />\n        <Button value={'x'}  onClick={cut} className='cutter' />\n        <Button value={'='}  onClick={displayResult} className='equal' />\n        <Button value={'('} onClick={displayQuery} className='brackets' />\n        <Button value={')'} onClick={displayQuery} className='brackets' />\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}